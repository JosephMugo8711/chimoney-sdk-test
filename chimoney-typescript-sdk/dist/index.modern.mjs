import e from"dotenv";function t(){return t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var s in r)({}).hasOwnProperty.call(r,s)&&(e[s]=r[s])}return e},t.apply(null,arguments)}e.config();class r{constructor(e){this.apiKey=void 0,this.baseUrl=void 0;const{apikey:t,baseUrl:r}=e;if(!t&&!process.env.API_KEY)throw new Error("API key must be provided either in config or environment variables.");this.apiKey=t||process.env.API_KEY,this.baseUrl=r||process.env.BASE_URL||""}getBaseUrl(){if(!this.baseUrl)throw new Error("Base URL is not defined. Please provide a valid base URL.");return this.baseUrl}getApiKey(){return this.apiKey}async apiRequest(e,r={}){try{const s=await fetch(`${this.getBaseUrl()}/${e}`,t({},r,{headers:t({},r.headers,{Authorization:`Bearer ${this.getApiKey()}`,"Content-Type":"application/json"})}));if(!s.ok){const e=await s.text();throw new Error(`API request failed: ${s.statusText} - ${e}`)}return await s.json()}catch(e){throw console.error("API Request Error:",e),e}}async post(e,t){return await this.apiRequest(e,{method:"POST",body:JSON.stringify(t)})}async get(e){return await this.apiRequest(e,{method:"GET"})}}class s extends r{}var a;a=s,[class extends r{async createChimoneyPayout(e){return await this.paymentPost("payouts/chimoney-payout",e)}async paymentPost(e,t){try{return await this.post(e,t)}catch(t){throw new Error(`Failed to process ${e}: ${t}`)}}}].forEach(e=>{Object.getOwnPropertyNames(e.prototype).forEach(t=>{a.prototype[t]=e.prototype[t]})});export{s as default};
